"use strict";(self.webpackChunkviolet_eco_github_io=self.webpackChunkviolet_eco_github_io||[]).push([[4565],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),l=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(t),d=o,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||c;return t?n.createElement(f,s(s({ref:r},p),{},{components:t})):n.createElement(f,s({ref:r},p))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=t.length,s=new Array(c);s[0]=d;var a={};for(var i in r)hasOwnProperty.call(r,i)&&(a[i]=r[i]);a.originalType=e,a[u]="string"==typeof e?e:o,s[1]=a;for(var l=2;l<c;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1804:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var n=t(7462),o=(t(7294),t(3905));const c={slug:"kpc",sidebar_position:2,description:"Kernel-Process Communication (KPC) is a term that describes how a process can communicate with Sakura."},s="Kernel-Process Communication",a={unversionedId:"specs/kernel/kpc",id:"specs/kernel/kpc",title:"Kernel-Process Communication",description:"Kernel-Process Communication (KPC) is a term that describes how a process can communicate with Sakura.",source:"@site/docs/specs/kernel/kpc.md",sourceDirName:"specs/kernel",slug:"/specs/kernel/kpc",permalink:"/docs/specs/kernel/kpc",draft:!1,editUrl:"https://github.com/violet-eco/docs/tree/main/docs/docs/specs/kernel/kpc.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"kpc",sidebar_position:2,description:"Kernel-Process Communication (KPC) is a term that describes how a process can communicate with Sakura."},sidebar:"violetSidebar",previous:{title:"Universal Serial Bus",permalink:"/docs/specs/kernel/hardware/usb"},next:{title:"System Calls",permalink:"/docs/specs/kernel/syscalls"}},i={},l=[],p={toc:l},u="wrapper";function m(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"kernel-process-communication"},"Kernel-Process Communication"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Kernel-Process Communication (KPC)")," is a term that\ndescribes how a process can communicate with Sakura."),(0,o.kt)("p",null,"There are two types of KPC:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/specs/kernel/syscalls"},"System calls")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/specs/kernel/signals"},"Signals"))))}m.isMDXComponent=!0}}]);
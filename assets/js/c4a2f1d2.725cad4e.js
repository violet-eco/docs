"use strict";(self.webpackChunkviolet_eco_github_io=self.webpackChunkviolet_eco_github_io||[]).push([[1821],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,u=d["".concat(l,".").concat(h)]||d[h]||m[h]||r;return n?i.createElement(u,o(o({ref:t},p),{},{components:n})):i.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={slug:"power-and-heat-management",sidebar_position:4,description:"Violet focuses power economy, battery optimization and heat control to ensure top performance and extend the life of Violetians' device."},o="Power and Heat Management",s={unversionedId:"features/power-and-heat-management",id:"features/power-and-heat-management",title:"Power and Heat Management",description:"Violet focuses power economy, battery optimization and heat control to ensure top performance and extend the life of Violetians' device.",source:"@site/docs/features/power-and-heat-management.md",sourceDirName:"features",slug:"/features/power-and-heat-management",permalink:"/docs/features/power-and-heat-management",draft:!1,editUrl:"https://github.com/violet-eco/docs/tree/main/docs/docs/features/power-and-heat-management.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"power-and-heat-management",sidebar_position:4,description:"Violet focuses power economy, battery optimization and heat control to ensure top performance and extend the life of Violetians' device."},sidebar:"violetSidebar",previous:{title:"Mood Detection",permalink:"/docs/features/mood-detection"},next:{title:"Smart Home Integration",permalink:"/docs/features/smart-home-integration"}},l={},c=[{value:"Dynamic Frequency Scaling",id:"dynamic-frequency-scaling",level:2},{value:"Adaptive Brightness Control",id:"adaptive-brightness-control",level:2},{value:"Device Sleep and Wake",id:"device-sleep-and-wake",level:2},{value:"Device Sleep",id:"device-sleep",level:3},{value:"Device Wake",id:"device-wake",level:3},{value:"Peripheral Power Management",id:"peripheral-power-management",level:2},{value:"Power State",id:"power-state",level:3},{value:"Battery Saver Mode",id:"battery-saver-mode",level:2},{value:"Termal Throttling",id:"termal-throttling",level:2},{value:"Temperature Thresholds",id:"temperature-thresholds",level:3},{value:"Clock Speed Reduction",id:"clock-speed-reduction",level:3},{value:"Performance Impact",id:"performance-impact",level:3},{value:"Dynamic Adjustment",id:"dynamic-adjustment",level:3},{value:"Active Cooling Systems",id:"active-cooling-systems",level:2},{value:"Fan Cooling",id:"fan-cooling",level:3},{value:"Performance-Driven Fan Control",id:"performance-driven-fan-control",level:3},{value:"Intelligent Fan Profiles",id:"intelligent-fan-profiles",level:3}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"power-and-heat-management"},"Power and Heat Management"),(0,a.kt)("p",null,"Violet focuses power economy, battery optimization and heat control to ensure top\nperformance and extend the life of Violetians' device. Our system employs a variety of\napproaches and strategies to optimise power utilization, increase battery life, and\nminimize excessive heat buildup. This document gives a summary of how Violet solves these\ncritical issues."),(0,a.kt)("h1",{id:"power-efficiency"},"Power Efficiency"),(0,a.kt)("p",null,"We are committed to making the operating system as energy-efficient as possible. This is accomplished using intelligent power management algorithms that optimize power use while retaining peak performance. Here are some highlights:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Dynamic Frequency Scaling:")," Based on workload and resource needs, Violet dynamically adjusts the CPU clock speed. By scaling the CPU frequency, this assures efficient power use.")),(0,a.kt)("h2",{id:"dynamic-frequency-scaling"},"Dynamic Frequency Scaling"),(0,a.kt)("p",null,"Dynamic Frequency Scaling (DFS) is a technique used in Violet to dynamically adjust the CPU clock speed based on the workload and resource requirements. The goal of DFS is to optimize power consumptiong by scaling the CPU frequency."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Workload Monitoring:")," Violet constantly monitors the CPU utilization, which represents the amount of processing power being utilized by running processes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Frequency Scaling Policies:")," Violet makes use of frequency scaling regulations, which specify the connection between CPU use and clock speed. These regulations govern how the CPU frequency is modified in response to the workload. Depending on the desired balance of power efficiency and performance, several policies can be adopted."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scaling Decision:")," Violet decides whether to raise or decrease the CPU clock speed based on the workload and the preset frequency scaling parameters. If the CPU is underutilized and the workload is light, the system may reduce the clock speed to save power. In contrast, if the CPU usage is high and intensive activities are being performed, the system may boost the clock speed to ensure optimal performance."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Clock Speed Adjustment:")," Violet adjusts the CPU clock speed after the scaling choice has been determined. This is accomplished by adjusting the CPU's voltage and frequency settings. Lowering the clock frequency decreases the number of clock cycles per second, which results in decreased power usage. Increasing the clock speed gives more processing capacity for resource-intensive applications, but it may also use more power.")),(0,a.kt)("h2",{id:"adaptive-brightness-control"},"Adaptive Brightness Control"),(0,a.kt)("p",null,"Violet has an adaptive brightness control function that automatically changes the brightness level of the display according on the ambient lighting conditions."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Light Sensor Detection:")," The existence of light sensors in the gadget is detected by Violet. These sensors, which are normally situated on the device's front or back, monitor the intensity of ambient light."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ambient Light Measurement:")," The ambient light levels surrounding the gadget are continually monitored by the light sensors. They provide real-time information about the brightness of the surroundings."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Brightness Adjustement:")," Violet dynamically changes the display brightness according on the observed ambient light levels to offer the best viewing experience. To better visibility in light conditions, the screen brightness is raised. The brightness is reduced in darker conditions to alleviate eye strain and preserve battery.")),(0,a.kt)("h2",{id:"device-sleep-and-wake"},"Device Sleep and Wake"),(0,a.kt)("p",null,"Device Sleep and Wake are power management features in Violet that control the device's sleep and wake states."),(0,a.kt)("h3",{id:"device-sleep"},"Device Sleep"),(0,a.kt)("p",null,"Device Sleep is a power-saving mode in which the device enters a low-power mode to conserve energy while not actively in use."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Idle Detection:")," Violet identifies times of user idleness by monitoring user input, such as keyboard and mouse interactions, touchscreen interactions, or a lack of input for a specific period of time."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Sleep Trigger:")," When the device is declared idle based on the idle detection criteria, Violet causes the device to enter the Sleep state."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Power Reduction:")," When in the Sleep mode, Violet lowers power usage by shutting off or reducing power to non-essential hardware components. This includes minimizing CPU and GPU activity, lowering display brightness, and halting background operations."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Power State Monitoring:")," While in Sleep mode, Violet continuously monitors various triggers, such as user input or scheduled wake events, to determine when the device should exit the Sleep state.")),(0,a.kt)("h3",{id:"device-wake"},"Device Wake"),(0,a.kt)("p",null,"Device Wake is the process of transitioning the device from the Sleep state back to an\nactive state. When certain events occur, Violet wakes up the device to make it ready for\nimmediate use."),(0,a.kt)("p",null,"Device Wake refers to the process of returning a device from the Sleep state to an active state. Violet wakes up the gadget when certain situations occur, preparing it for instant usage."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Wake Triggers:")," Violet watches for particular triggers that may force the gadget to wake up from its sleep state. User interaction, planned wake events, network activity, or external device connections are examples of triggers."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Power Restoration:")," When a wake trigger is identified, Violet provides power to the required hardware components, such as the CPU, GPU, display, and input devices, to bring the device back to life."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Resume Operations:")," Violet restarts all suspended or halted processes, programs, or tasks that were running before the device went to sleep.")),(0,a.kt)("h2",{id:"peripheral-power-management"},"Peripheral Power Management"),(0,a.kt)("p",null,"Violet has a feature called ",(0,a.kt)("em",{parentName:"p"},"Peripheral Power Management"),", which enables for the effective\nmanagement of power consumption by peripheral devices attached to the system. Violet\noptimizes power utilization, increases battery life and improves overall system economy\nby intelligently managing the power states of peripherals."),(0,a.kt)("h3",{id:"power-state"},"Power State"),(0,a.kt)("p",null,"Violet uses several power states to manage peripheral power consumption based on use and\nsystem needs. The following are the primary power states in Peripheral Power Management:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Active State:")," Peripherals are completely powered up and ready to use when they are in the active state. To give complete functioning, they work at their greatest capacity."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Idle State:")," Violet may convert a peripheral device to an idle state when it is inactive and not actively utilized. The peripheral consumes less power while remaining functioning in this configuration. When idle, a display, for example, may reduce its brightness or enter a power-saving mode."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Standby State:")," The standby state provides a higher level of power savings. The peripheral consumes minimum power and enters a low-power mode in this condition, while still retaining important functionalities to swiftly restart operation as needed. A printer, for example, may enter a standby mode to conserve electricity while remaining ready to print when a task is received."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Power-Off State:")," The power-off condition turns off all power to the peripheral device. The peripheral is not functioning in this state and turning it back on needs specific activation or human engagement.")),(0,a.kt)("p",null,"Violet provides power to peripherals dynamically according on their consumption demands.\nIt intelligently optimizes power distribution to prioritize power-hungry peripherals as\nnecessary while reducing power to less vital or idle devices."),(0,a.kt)("p",null,"Peripheral devices are only powered when needed. USB devices, for example, are turned on when they are connected or when the system detects data transfer activity. This ensures that power is distributed to peripherals effectively, eliminating excessive power use."),(0,a.kt)("h2",{id:"battery-saver-mode"},"Battery Saver Mode"),(0,a.kt)("p",null,"Violet's Battery Saver Mode is intended to improve portable device battery life by\noptimizing system settings and reducing power consumption. When enabled, this function\ndynamically adjusts multiple system components to decrease energy usage while ensuring a\nseamless user experience."),(0,a.kt)("p",null,"Battery Saver Mode optimizes system settings and lowers power usage to extend the life of\nportable devices' batteries. This is accomplished by modifying the CPU clock speed,\nminimizing background processes, and improving resource allocation. The system consumes\nless power when operating at a reduced performance level, resulting in longer battery\nlife."),(0,a.kt)("p",null,"Battery Saver Mode decreases screen brightness and shortens screen timeout duration to\nsave even more power. When the gadget is not actively in use, this helps to minimize\npower usage."),(0,a.kt)("p",null,"Background program operations are also restricted or halted to save CPU utilization and\ndata transfer. Non-essential operations are halted or limited to critical functions to\nconserve energy."),(0,a.kt)("p",null,"Violet may additionally optimize network connections to save data use and limit\nnetwork-intensive functions."),(0,a.kt)("p",null,"While Battery Saver Mode is designed to extend battery life, it may have a little impact\non overall user experience. Due to lower performance and limited background operations,\nusers may notice a drop in system responsiveness and app performance. Violet, on the\nother hand, aims to achieve a balance between power savings and user experience, ensuring\nthat key functionality is preserved while battery life is conserved."),(0,a.kt)("h1",{id:"heat-management"},"Heat Management"),(0,a.kt)("p",null,"Heat management is an important factor in device performance and lifetime. Overheating\ncan result in decreased performance, faster component wear and tear and potentially\nsystem instability. Violet employs a variety of heat management mechanisms to maintain\nideal device temperature and prevent overheating."),(0,a.kt)("h2",{id:"termal-throttling"},"Termal Throttling"),(0,a.kt)("p",null,"Thermal throttling is a crucial heat management technique employed by Violet to prevent\ndevice overheating. It involves dynamically adjusting the performance of the CPU and GPU\nbased on temperature levels to maintain a safe operating temperature."),(0,a.kt)("h3",{id:"temperature-thresholds"},"Temperature Thresholds"),(0,a.kt)("p",null,"Violet continuously monitors the temperature of the CPU and GPU through embedded\ntemperature sensors. These sensors provide real-time temperature readings that are\ncompared against predefined temperature thresholds. When the temperature exceeds a\ncertain threshold, thermal throttling is triggered."),(0,a.kt)("h3",{id:"clock-speed-reduction"},"Clock Speed Reduction"),(0,a.kt)("p",null,"When thermal throttling is activated, Violet reduces the clock speed of the CPU and GPU.\nThe clock speed refers to the rate at which these components process instructions and\nperform calculations. By lowering the clock speed, the CPU and GPU generate less heat,\nhelping to mitigate temperature rise."),(0,a.kt)("h3",{id:"performance-impact"},"Performance Impact"),(0,a.kt)("p",null,"Thermal throttling does come with a performance impact. When the clock speed is reduced,\nthe CPU and GPU's processing capabilities are limited, resulting in slower performance.\nHowever, this trade-off is necessary to prevent overheating and protect the device from\npotential damage."),(0,a.kt)("h3",{id:"dynamic-adjustment"},"Dynamic Adjustment"),(0,a.kt)("p",null,"The extent of thermal throttling varies based on the severity of the temperature\nincrease. Violet employs dynamic adjustment mechanisms to ensure that the degree of\nthrottling matches the temperature rise. In less critical scenarios, where the\ntemperature is only slightly above the threshold, the clock speed reduction may be\nminimal. Conversely, in more severe cases, where the temperature is significantly higher,\nthe clock speed reduction may be more substantial."),(0,a.kt)("h2",{id:"active-cooling-systems"},"Active Cooling Systems"),(0,a.kt)("p",null,"Active cooling systems are an integral part of Violet's heat management strategy. These\nsystems utilize mechanisms to actively remove excess heat from the device, thereby\nhelping to maintain optimal operating temperatures. By employing active cooling methods,\nViolet enhances performance, prolongs device lifespan, and ensures user comfort."),(0,a.kt)("h3",{id:"fan-cooling"},"Fan Cooling"),(0,a.kt)("p",null,"One of the primary methods employed in active cooling is fan cooling. Violet utilizes\nfans strategically placed within the device to facilitate the movement of air and\ndissipate heat. When the system detects elevated temperatures, the fans spin at higher\nspeeds to increase airflow and carry heat away from critical components."),(0,a.kt)("h3",{id:"performance-driven-fan-control"},"Performance-Driven Fan Control"),(0,a.kt)("p",null,"To optimize cooling efficiency, Violet implements performance-driven fan control\nalgorithms. These algorithms take into account various factors, such as CPU and GPU\nutilization, ambient temperature, and workload intensity, to determine the appropriate\nfan speed. During resource-intensive tasks, the fans operate at higher speeds to provide\nmaximum cooling capacity, ensuring optimal performance and temperature management."),(0,a.kt)("h3",{id:"intelligent-fan-profiles"},"Intelligent Fan Profiles"),(0,a.kt)("p",null,"Violet incorporates intelligent fan profiles that dynamically adjust fan speed based on\nsystem requirements. These profiles are designed to balance cooling performance, noise\nlevels, and power consumption. During low-intensity tasks or when the device is in a\nstandby state, the fans operate at lower speeds, resulting in quieter operation and\nreduced power consumption. Conversely, during demanding workloads or high-temperature\nscenarios, the fans ramp up their speed to deliver effective cooling."))}m.isMDXComponent=!0}}]);
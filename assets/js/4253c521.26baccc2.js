"use strict";(self.webpackChunkviolet_eco_github_io=self.webpackChunkviolet_eco_github_io||[]).push([[2454],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||s;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2412:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={slug:"signals",sidebar_position:4,description:"Signals are a type of KPC. They are used by Sakura to send information."},i="Signals",o={unversionedId:"specs/kernel/signals",id:"specs/kernel/signals",title:"Signals",description:"Signals are a type of KPC. They are used by Sakura to send information.",source:"@site/docs/specs/kernel/signals.md",sourceDirName:"specs/kernel",slug:"/specs/kernel/signals",permalink:"/docs/specs/kernel/signals",draft:!1,editUrl:"https://github.com/violet-eco/docs/tree/main/docs/docs/specs/kernel/signals.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"signals",sidebar_position:4,description:"Signals are a type of KPC. They are used by Sakura to send information."},sidebar:"violetSidebar",previous:{title:"System Calls",permalink:"/docs/specs/kernel/syscalls"},next:{title:"System services",permalink:"/docs/specs/services/"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"List of signals",id:"list-of-signals",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"signals"},"Signals"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Signals")," are a type of ",(0,a.kt)("a",{parentName:"p",href:"/docs/specs/kernel/kpc"},"KPC"),".\nThey are used by Sakura to send information."),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"When a process is created, Sakura associates it:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Signals handler table (SHT)"),(0,a.kt)("li",{parentName:"ul"},"Signals queue"),(0,a.kt)("li",{parentName:"ul"},"Readiness indicator")),(0,a.kt)("p",null,"Each signal has an 8-bit code to represent it.\nAlso, a 32 bytes data field is added to give additional\ninformation about the signal."),(0,a.kt)("p",null,"When Sakura sends a signal to a process, it first checks\nif a handler is running. If so, it puts the signal in the queue."),(0,a.kt)("p",null,"Otherwise, it reads the readiness indicator. If ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),", the signal is queued."),(0,a.kt)("p",null,"If this is not the case, it checks whether the signal has a handler in the SHT.\nIf the handler is not present, depending on the particular signals, it may be\nignored or a default behavior may be used."),(0,a.kt)("p",null,"If the handler is found, Sakura checks whether the memory area pointed as\nthe address of the handler can be run by the current process.\nIf not, the signal is converted to the HANDLER_FAULT signal."),(0,a.kt)("p",null,"Sakura then switches the process to its main thread and makes it jump\nto the handler's address, then resumes it."),(0,a.kt)("p",null,"When the handler returns, if the signal is waiting for a response,\nSakura reads it from a specific register and does what needs to be done.\nIf it is, the kernel simply makes the process jump back to the address it\nwas to before the signal was emitted, and switch to the original thread."),(0,a.kt)("h2",{id:"list-of-signals"},"List of signals"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"TODO")))}d.isMDXComponent=!0}}]);